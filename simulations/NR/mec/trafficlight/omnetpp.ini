[General]
image-path=../../../images
output-scalar-file-append = false
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${iterationvars}-${repetition}.vec
seed-set = ${repetition}
**.sctp.**.scalar-recording = false  # remove annoying statistics from SCTP
**.sctp.**.vector-recording = false  # remove annoying statistics from SCTP
**.vector-recording = false

############### SCTP configuration ##################
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false

############### General PHY parameters ##############
**.downlink_interference = true
**.uplink_interference = true
**.ueTxPower = 26
**.eNodeBTxPower = 46
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 40   # reports CQI every 40ms

############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


#------------------------------------#
# Config MultiCell
#
# General configuration for the for a multicell NR Standalone deployment
#
[Config MultiCell]
network = simu5g.simulations.NR.mec.trafficlight.TrafficlightNetwork
sim-time-limit=20s
description = "Base configuration, do not run this config!"

############# Floorplan parameters ################
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMaxY = 750m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 250m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.initFromDisplayString = false


**.car*[*].mobility.constraintAreaMaxX = 1000m
**.car*[*].mobility.constraintAreaMaxY = 750m
**.car*[*].mobility.constraintAreaMinX = 200m
**.car*[*].mobility.constraintAreaMinY = 200m
**.car*[*].mobility.constraintAreaMinZ = 0m
**.car*[*].mobility.constraintAreaMaxZ = 0m
**.car*[*].mobility.initFromDisplayString = false

**.trLight*.mobility.initFromDisplayString = true
**.sumo*.mobility.initFromDisplayString = true

############### CA configuration ################# 
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=0}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=50}

*.gnb*.cellularNic.numCarriers = 1
*.gnb*.cellularNic.channelModel[0].componentCarrierIndex = 0
*.car*[*].cellularNic.numCarriers = 1
*.car*[*].cellularNic.nrChannelModel[0].componentCarrierIndex = 0

**.trLight*.cellularNic.numCarriers = 1
**.trLight*.cellularNic.nrChannelModel[0].componentCarrierIndex = 0
**.sumo*.cellularNic.numCarriers = 1                            
**.sumo*.cellularNic.nrChannelModel[0].componentCarrierIndex = 0

############### BS position #################
*.gnb1.mobility.initialX = 250m
*.gnb1.mobility.initialY = 500m
*.gnb2.mobility.initialX = 750m
*.gnb2.mobility.initialY = 500m

############### X2 configuration #################
*.gnb*.numX2Apps = 1                                        # one x2App per peering node
*.gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)  # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.gnb1.x2App[0].client.connectAddress = "gnb2%x2ppp0" 
*.gnb2.x2App[0].client.connectAddress = "gnb1%x2ppp0" 

############## UE configuration ##################
**.numCarA = ${numA=10}
**.numCarB = ${numB=10}
**.numCarC = ${numC=10}
**.numCarD = ${numD=10}

# UEs associates to the best BS at the beginning of the simulation
*.car*[*].macCellId = 0
*.car*[*].masterId = 0
*.car*[*].nrMacCellId = 1
*.car*[*].nrMasterId = 1

**.trLight*.macCellId = 0  
**.trLight*.masterId = 0   
**.trLight*.nrMacCellId = 1
**.trLight*.nrMasterId = 1 

**.sumo*.macCellId = 0  
**.sumo*.masterId = 0   
**.sumo*.nrMacCellId = 1
**.sumo*.nrMasterId = 1 

**.dynamicCellAssociation = true
**.enableHandover = true

############ UEs position #################
**.car*[*].mobility.typename = "LinearMobility"
**.car*[*].mobility.speed = uniform(3mps,13.89mps)

**.carA[*].mobility.initialX = uniform(0m,1000m)
**.carA[*].mobility.initialY = uniform(250m,750m)

**.carB[*].mobility.initialX = uniform(0m,1000m)
**.carB[*].mobility.initialY = uniform(250m,750m)

**.carC[*].mobility.initialX = uniform(0m,1000m)
**.carC[*].mobility.initialY = uniform(250m,750m)

**.carD[*].mobility.initialX = uniform(0m,1000m)
**.carD[*].mobility.initialY = uniform(250m,750m)

**.trLight*.mobility.typename = "StationaryMobility"
**.sumo*.mobility.typename = "StationaryMobility"
#------------------------------------#



#------------------------------------#
# Config CBR-DL
#
# Configuration with CBR DL traffic from a remote server to the UEs
# 
[Config traffic-light-data]
extends = MultiCell
description = "Hexa-X demo5 scenario 1"

# one UDP application for each user
**.car*[*].numApps = 1
**.sumo*.numApps = 2
**.trLight*.numApps = 2


# the amount of UDP applications on server should be equal to the total number of cars, plus 4 AI agents 
*.serverA.numApps = ${numA}
*.serverB.numApps = ${numB} 
*.serverC.numApps = ${numC} 
*.serverD.numApps = ${numD}
*.server.numApps  = 8 

#========= Car Application Setup =============
# each car receives video-streaming-like traffic
**.car*[*].app[*].typename = "CbrReceiver"
**.car*[*].app[*].localPort = 3000

*.server*.app[*].typename = "CbrSender"
*.server*.app[*].PacketSize = 100
*.server*.app[*].sampling_time = 0.02s
*.server*.app[*].destPort = 3000 
*.server*.app[*].localPort = 3088+ancestorIndex(0) 
*.server*.app[*].startTime = uniform(0s,0.02s)
*.server*.app[*].finishTime = uniform(19.9s,19.92s)

*.serverA.app[*].destAddress = "carA[" + string(ancestorIndex(0)) + "]"
*.serverB.app[*].destAddress = "carB[" + string(ancestorIndex(0)) + "]"
*.serverC.app[*].destAddress = "carC[" + string(ancestorIndex(0)) + "]"
*.serverD.app[*].destAddress = "carD[" + string(ancestorIndex(0)) + "]"
#------------------------------------#

#========= Sumo Application Setup ============= SUMO->AI
*.server.app[0..3].typename = "CbrReceiver"
*.server.app[0..3].localPort = 3000 + ancestorIndex(0)

**.sumo*.app[*].typename = "CbrSender"
**.sumo*.PacketSize = 100
**.sumo*.sampling_time = 0.02s
**.sumo*.destAddress = "server"
 
**.sumo*.app[*].destPort = 3000 + ancestorIndex(1) 
**.sumo*.app[*].localPort = 3088+ancestorIndex(0)

**.sumo*.app[*].startTime = uniform(0s,0.02s)
**.sumo*.app[*].finishTime = uniform(19.9s,19.92s)
#------------------------------------#


#============ AI Application Setup ============= AI -> trLight
*.server.app[0..3].typename = "CbrReceiver"
*.server.app[0..3].localPort = 3000 + ancestorIndex(0)

**.sumo*.app[*].typename = "CbrSender"
**.sumo*.PacketSize = 100
**.sumo*.sampling_time = 0.02s
**.sumo*.destAddress = "server"
 
**.sumo*.app[*].destPort = 3000 + ancestorIndex(1) 
**.sumo*.app[*].localPort = 3088+ancestorIndex(0)

**.sumo*.app[*].startTime = uniform(0s,0.02s)
**.sumo*.app[*].finishTime = uniform(19.9s,19.92s)
#------------------------------------#


#======= TrLight Application Setup ============= TrLight-> Sumo
*.server.app[0..3].typename = "CbrReceiver"
*.server.app[0..3].localPort = 3000 + ancestorIndex(0)

**.sumo*.app[*].typename = "CbrSender"
**.sumo*.PacketSize = 100
**.sumo*.sampling_time = 0.02s
**.sumo*.destAddress = "server"
 
**.sumo*.app[*].destPort = 3000 + ancestorIndex(1) 
**.sumo*.app[*].localPort = 3088+ancestorIndex(0)

**.sumo*.app[*].startTime = uniform(0s,0.02s)
**.sumo*.app[*].finishTime = uniform(19.9s,19.92s)
#------------------------------------#






#------------------------------------#
# Config CBR-UL
#
# Configuration with CBR UL traffic from the UEs to a remote server
# 
[Config CBR-UL]
extends=MultiCell
description = "CBR UL traffic from UEs to remote server"

# one UDP application for each user
*.ue[*].numApps = 1

# the amount of UDP applications on server should be equal to (numUEs)*(ue[*].numApps) 
*.server.numApps = ${numUEs}

#============= Application Setup =============
*.server.app[*].typename = "CbrReceiver"
*.server.app[*].localPort = 3000 + ancestorIndex(0)

*.ue[*].app[*].typename = "CbrSender"
*.ue[*].app[*].PacketSize = 100
*.ue[*].app[*].sampling_time = 0.02s
*.ue[*].app[*].destAddress = "server" 
*.ue[*].app[*].destPort = 3000 + ancestorIndex(1) 
*.ue[*].app[*].localPort = 3088+ancestorIndex(0)
*.ue[*].app[*].startTime = uniform(0s,0.02s)
*.ue[*].app[*].finishTime = uniform(19.9s,19.92s)
#------------------------------------#


